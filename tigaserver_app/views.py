from rest_framework import viewsets
from serializers import UserSerializer, ReportSerializer, MissionSerializer, PhotoSerializer, FixSerializer, \
    ConfigurationSerializer, ReportResponseSerializer
from models import TigaUser, Mission, Report, ReportResponse,  Photo, \
    Fix, Configuration
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.generics import mixins


class ReadOnlyModelViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):
    """
    A viewset that provides `retrieve`, andlist` actions.

    To use it, override the class and set the `.queryset` and
    `.serializer_class` attributes.
    """
    pass


class WriteOnlyModelViewSet(mixins.CreateModelMixin, viewsets.GenericViewSet):
    """
    A viewset that provides`create` action.

    To use it, override the class and set the `.queryset` and
    `.serializer_class` attributes.
    """
    pass


class ReadWriteOnlyModelViewSet(mixins.CreateModelMixin, viewsets.GenericViewSet, mixins.ListModelMixin):
    """
    A viewset that provides`create` action.

    To use it, override the class and set the `.queryset` and
    `.serializer_class` attributes.
    """
    pass


@api_view(['POST'])
def upload_form(request):
    """
API endpoint for uploading photos associated with a report. Data must be posted as multipart form,
with with _photo_ used as the form key for the file itself, and _report_ used as the key for the report
version_UUID linking this photo to a specific report version.
    """
    if request.method == 'POST':
        this_report = Report.objects.get(version_UUID=request.DATA['report'])
        instance = Photo(photo=request.FILES['photo'], report=this_report)
        instance.save()
        return Response('uploaded')


# For production version, substitute WriteOnlyModelViewSet
class UserViewSet(ReadWriteOnlyModelViewSet):
    """
API endpoint for posting user registration. The only information required is a 36 digit UUID generated on user's
device. Registration time is added by server automatically.
    """
    queryset = TigaUser.objects.all()
    serializer_class = UserSerializer


# For production version, substitute WriteOnlyModelViewSet
class ReportViewSet(ReadWriteOnlyModelViewSet):
    """
API endpoint for posting new reports and report versions. (Every time a user edits a report, a new version is
posted; user keeps only most recent version on phone but server retains all versions.) Note that the individual
responses contained in each report are posted separately to the _responses_ endpoint
    """
    queryset = Report.objects.all()
    serializer_class = ReportSerializer


# For production version, substitute WriteOnlyModelViewSet
class ReportItemViewSet(ReadWriteOnlyModelViewSet):
    """
API endpoint for posting individual report responses.
    """
    queryset = ReportResponse.objects.all()
    serializer_class = ReportResponseSerializer


class MissionViewSet(ReadOnlyModelViewSet):
    """
API endpoint for downloading missions created by MoveLab.

* **id**: Unique identifier of the mission. Automatically generated by server when mission created.
* **title**: Title of mission.
* **short_description**: Text to be displayed in mission list.
* **long_description**: Text that fully explains mission to user.
* **help_text**: Text to be displayed when user taps mission help button.
* **language**: What language is mission displayed in? (It will be sent only users who have chosen this language.
* **platform**: What type of device is this mission is intended for? It will be sent only to these devices.
* **creation_time**: Date and time mission was created by MoveLab. Automatically generated when mission saved.
* **expiration_time**: Optional date and time when mission should expire (if ever). Mission will no longer be displayed to users after this date-time.
* **photo_mission**: Should this mission allow users to attach photos to their responses? (True/False).
* **url**: Optional URL that wll be displayed to user for this mission. (The entire mission can consist of user going to that URL and performing some action there. For security reasons, this URL must be within a MoveLab domain.
* **triggers**:
    * **lat_lower_bound**:Optional lower-bound latitude for triggering mission to appear to user. Given in decimal degrees.
    * **lat_upper_bound**: Optional upper-bound latitude for triggering mission to appear to user. Given in decimal degrees.
    * **lon_lower_bound**: Optional lower-bound longitude for triggering mission to appear to user. Given in decimal
    degrees.
    * **lon_upper_bound**: Optional upper-bound longitude for triggering mission to appear to user. Given in decimal degrees.
    * **time_lowerbound**: Lower bound of optional time-of-day window for triggering mission. If location trigger also is specified, mission will be triggered only if user is found in that location within the window; if location is not specified, the mission will be triggered for all users who have their phones on during the time window. Given as time without date, formatted as ISO 8601 time string (e.g. "12:34:00") with no time zone specified (trigger is always based on local time zone of user.)
    * **time_upperbound**: Lower bound of optional time-of-day window for triggering mission. If location trigger also is specified, mission will be triggered only if user is found in that location within the window; if location is not specified, the mission will be triggered for all users who have their phones on during the time window. Given as time without date, formatted as ISO 8601 time string (e.g. "12:34:00") with no time zone specified (trigger is always based on local time zone of user.)
* **items**:
    * **question**: Question displayed to user.
    * **answer_choices**: Response choices, with each choice surrounded by square brackets (e.g. _[Yes][No]_).
    * **help_text**: Help text displayed to user for this item.
    * **prepositioned_image_reference**: Optional image displayed to user within the help message. Integer reference to image prepositioned on device.')
    * **attached_image**: Optional Image displayed to user within the help message. File.
    """
    queryset = Mission.objects.all()
    serializer_class = MissionSerializer


# For production version, substitute WriteOnlyModelViewSet
class PhotoViewSet(ReadWriteOnlyModelViewSet):
    queryset = Photo.objects.all()
    serializer_class = PhotoSerializer


# For production version, substitute WriteOnlyModelViewSet
class FixViewSet(ReadWriteOnlyModelViewSet):
    """
API endpoint for posting location fixes.
    """
    queryset = Fix.objects.all()
    serializer_class = FixSerializer


class ConfigurationViewSet(ReadOnlyModelViewSet):
    """
API endpoint for downloading app configurations created by Movelab. Only the most recent configuration is downloaded.

* id: Auto-incremented primary key record ID.
* samples_per_day: Number of randomly-timed location samples to take per day.
* creation_time: Date and time when this configuration was created by MoveLab. Automatically generated when
record is saved.
    """
    queryset = Configuration.objects.all()
    serializer_class = ConfigurationSerializer
