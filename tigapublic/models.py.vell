from __future__ import unicode_literals
from django.conf import settings
from datetime import datetime
#from django.db import models
from django.contrib.gis.db import models

from django.contrib.gis.gdal import DataSource
from django.contrib.gis.utils import LayerMapping

# from django.db.models.functions import Concat
# from django.db.models import CharField, Value as V

class NotificationImageFormModel(models.Model):
    image = models.ImageField(upload_to=settings.MEDIA_ROOT)
    class Meta:
        db_table = None

class Notification(models.Model):
    report_id = models.CharField(max_length=36, blank=False)
    user_id = models.CharField(max_length=36, blank=False)
    expert_id = models.IntegerField(blank=False, null=False)
    date_comment = models.DateTimeField(auto_now_add=True, default=datetime.now())
    expert_comment = models.TextField('Expert comment', help_text='Text message sent to user')
    expert_html = models.TextField('Expert comment, expanded and allows html', help_text='Expanded message information goes here. This field can contain HTML')
    photo_url = models.TextField('Url to picture that originated the comment', null=True, blank=True, help_text='Relative url to the public report photo')
    acknowledged = models.BooleanField(default=False,help_text='This is set to True through the public API, when the user signals that the message has been received')
    public = models.BooleanField(default=False)

    class Meta:
        managed = False
        db_table = 'tigaserver_app_notification'

class MapAuxReports(models.Model):
    id = models.IntegerField(primary_key=True)
    version_uuid = models.CharField(max_length=36, blank=True)
    observation_date = models.DateTimeField(blank=True, null=True)
    lon = models.FloatField(blank=True, null=True)
    lat = models.FloatField(blank=True, null=True)
    ref_system = models.CharField(max_length=36, blank=True)
    type = models.CharField(max_length=7, blank=True)
    breeding_site_answers = models.CharField(max_length=100, blank=True)
    mosquito_answers = models.CharField(max_length=100, blank=True)
    expert_validated = models.NullBooleanField()
    expert_validation_result = models.CharField(max_length=100, blank=True)
    simplified_expert_validation_result = models.CharField(max_length=100,
                                                           blank=True)
    site_cat = models.IntegerField(blank=True, null=True)
    storm_drain_status = models.CharField(max_length=50, blank=True)
    edited_user_notes = models.CharField(max_length=4000, blank=True)
    photo_url = models.CharField(max_length=255, blank=True)
    photo_license = models.CharField(max_length=100, blank=True)
    dataset_license = models.CharField(max_length=100, blank=True)
    single_report_map_url = models.CharField(max_length=255, blank=True)
    private_webmap_layer = models.CharField(max_length=255, blank=True)

    class Meta:
        managed = False
        db_table = 'map_aux_reports'
        #test = type

class StormDrain(models.Model):
    gid = models.IntegerField(primary_key=True)
    icon = models.IntegerField(blank=True, null=True)
    municipi = models.CharField(max_length=100, blank=True)
    aigua = models.CharField(max_length=10, blank=True)
    codi = models.CharField(max_length=50, blank=True)
    lon = models.FloatField(blank=True, null=True)
    lat = models.FloatField(blank=True, null=True)
    user_id = models.IntegerField(blank=False, null=False)

    class Meta:
        managed = False
        db_table = 'storm_drain'
